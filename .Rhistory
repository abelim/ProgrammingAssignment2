source "cachematrix.R"
source ("cachematrix.R")
x <- 1:10
makeVector(x)
y<<-makeVector(x)
y<-makeVector(x)
source ("cachematrix.R")
source("test.R")
set.seed(1110201)
r = rnorm (1000000)
mat1 = matrix (r, nrow=1000, ncol=1000)
test(mat1)
mat1
mat1 = matrix (r, nrow=10, ncol=10)
mat1
makeCacheMatrix(mat1)
y<-makeCacheMatrix(mat1)
cacheSolve(mat1)
y=makeCacheMatrix(mat1)
cacheSolve(y)
mat1
mat1*y
prod(mat1, y)
prod(mat1)
?prod
y %*% mat1
z<-cacheSolve(y)
z
product(mat1, z)
z %*% mat1
mat1(r, nrow=3, ncol=3)
mat1 = matrix(r, nrow=3, ncol=3)
mat1
temp = makeCacheMatrix(mat1)
invmat = cacheSolve(temp)
invmat
mat1r(1:10)
r<-(1:10)
mat1 = matrix(r, nrow=3, ncol=3)
mat1
makeCacheMatrix(mat1)
temp<-makeCacheMatrix(mat1)
invmat<-cacheSolve(temp)
r<-random(1:10)
?sample()
x<-1:12
sample(x)
mat1 = matrix(sample(x), nrow=3, ncol=3)
mat1
?inv
# Goals: A first look at R objects - vectors, lists, matrices, data frames.
# To make vectors "x" "y" "year" and "names"
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
source ("vectorlistmatrices.R")
x <- c(2,3,7,9)
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
person()
person
x = c(2,3,7,9)
x
y <- c(9,7,3,2)
year <- 1990:1993
names <- c("payal", "shraddha", "kritika", "itida")
# Accessing the 1st and last elements of y --
y[1]
y[length(y)]
# To make a list "person" --
person <- list(name="payal", x=2, y=9, year=1990)
person
# Accessing things inside a list --
person$name
person$x
# To make a matrix, pasting together the columns "year" "x" and "y"
# The verb cbind() stands for "column bind"
cbind(year, x, y)
# To make a "data frame", which is a list of vectors of the same length --
D <- data.frame(names, year, x, y)
nrow(D)
# Accessing one of these vectors
D$names
# Accessing the last element of this vector
D$names[nrow(D)]
# Or equally,
D$names[length(D$names)]
person
c = rbind (c(1, -1/4), c(-1/4, 1))
c
?solve
b <- solve(c) %*% c
View(b)
solve (c)
b <- solve (c)
b %*% c
rm(ls=all())
?rm
rm (list = ls())
source ("cachematrix.R")
makeVector(x)
x <- rand(1:10)
x <- 1:10
makeVector(x)
matrix(rexp(200, rate=.1), ncol=20)
matrix(sample.int(99, size=10*10, replace = TRUE), nrow=10, ncol=10)
x<-matrix(sample.int(99, size=10*10, replace = TRUE), nrow=10, ncol=10)
y<-solve(x)
x*y
x%*%y
round(x%*%y)
?round
round(x%*%y, digits=1)
round(x%*%y, digits=100)
round(x%*%y, digits=10)
signif(x%*%y, digits=3)
signif(x%*%y, digits=2)
signif(x%*%y, digits=1)
signif(x%*%y, digits=0)
round(x%*%y)
makeCacheMatrix(get(x))
makeCacheMatrix(x
makeCacheMatrix(x)
makeCacheMatrix(x)
my_matrix <- makeCacheMatrix((matrix(sample.int(99, size=1000*1000, replace=TRUE), nrow=1000, ncolm=1000)))
my_matrix$get()
my_matrix <- makeCacheMatrix((matrix(sample.int(99, size=1000*1000, replace=TRUE), nrow=1000, ncol=1000)))
my_matrix$get()
my_matrix$getinv()
cacheSolve(my_matrix)
y<-cacheSolve(my_matrix)
my_matrix$getinv()
my_matrix%*%y
x<-my_matrix$get()
x%*%y
round(x%*%y)
